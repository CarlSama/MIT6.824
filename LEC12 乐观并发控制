阅读FaRM论文的目的：
  许多用户需要分布式事物，但是分布式事物通常速度慢。
  
  但是，这篇论文论证了分布式事物也能保证惊人的性能。


高性能描述：
  每秒9千万次复制的、持久化的、事物处理（图7）
    单机1百万/s事物，每个事物只需要少量的消息通信（用于复制、commit）
  
  其他系统能达到单机1百万/s次处理（例如memcached），但是没有事物+复制+持久化
  
  9千万事物的处理效果： 每秒1万条Tweets /  每秒2百万个e-mail


如何达到高性能：
  1. 数据全部存储在RAM（无磁盘读）
  2. 非挥发性内存（无磁盘写）
  3. 单向的RDMA[Remote Direct Memory Access 远程直接内存访问]（快速的跨网络访问RAM）
  4. 快速的用户层访问NIC[Network Interface Card](网络接口卡）
  5. 事物+复制协议充分挖掘单向RDMA
  ??RDMA和NIC的关系？？


NVRAM
  FaRM写RAM而非磁盘 -- 消除了很大的性能瓶颈【写入RAM需要200ns，写入硬盘需要10ms，写入SSD需要100us】
  但是RAM在断电时会丢失内容，自身是非持久化的
  为什么不写入f+1台机器，来容忍f个故障呢？
    如果故障通常为独立的，则可以考虑。但是断电故障通常不是独立的 -- 有可能影响100%的机器！
  所以：
    每个rack都有独立电池，可以支撑机器运行几分钟
    当断电时，电源h/w通知s/w，s/w暂停处理事务。s/w将FaRM's的RAM写入SSD，可能需要几分钟。
    然后机器停机，当重新启动后，FaRM从SSD中读取数据。【实现“非易失RAM”的效果】
  如果s/w写入SSD时发生crash怎么办？
    例如FaRM、内核的BUG，或者CPU / 内存 / 硬件的错误
    FaRM通过将机器的RAM备份拷贝到其他机器来应对单机crash【保证f + 1份拷贝】
    crash（不像断电）总是独立的


为什么网络总是性能瓶颈？
    通常的网络设置：
      app               app
      ----              ----
      套接字缓冲区        缓冲区
      TCP               TCP
      NIC驱动            驱动
      NIC---------------NIC
    需要许多CPU操作：
      系统调动，消息拷贝，中断，RPC的双工
    慢：
      很难构建超过1万QPS的RPC【？？？？】
      网线b/w（例如，10Gb/s）通常不是短RPC的瓶颈
      每个数据包的CPU消耗是所有短消息的限制因素


 FaRm的网络设置
    【主机，56GB的NIC，昂贵的交换机】   
    NIC用于单向RDMA：内存读写，而非数据包传递
    发送者声明”将数据写到某个地址“，或者”读取某个地址“
      NIC硬件在远端执行
      返回硬件的回执
    在远端无中断、内核、拷贝、read()，&c
    单机吞吐：1千万/s【图2】
    延迟：5ms
    FaRM使用RDMS有三种方式：
      在事物处理过程中，单向读取对象【也就是VALIDATE】
      单向写入主日志或者消息队列构成的RPC
      单向写入备份日志


程序访问NIC h/w是流线行的
    程序直接和NIC交互 -- 无系统调用，无内核访问
    发送者给NIC一个RDMA命令作为RPC，接受者s/w轮训RDMA写入的内存


挑战
    如何使用单向读/写来完成事务、复制过程？
    我们看到的协议要求接受者CPU积极的处理消息（例如，Raft或者两步提交)【？？？？？】


回顾下分布式事物

一个例子：
  x和y是银行存款，可能分布在不同的机器上
  T1：        T2：
  add(x, 1)   tmp = get(x)
  add(y, -1)  tmp = get(y)
              print tmp1, tmp2
              
  x和y初始值都为10
  我们希望顺序化：结果应该符合事物按照顺序依次运行
  只有两种可能的顺序：
        T1然后T2，结果为11，9
        T2然后T1，结果为10，10
        顺序化不会有第三种结果

两个级别的事务并发控制：
  悲观的：
      访问对象前等待锁，一直持有到commit / abort，【two-phase locking】，会有冲突，导致延迟
  
  乐观的：
      无锁访问对象，如果OK的话，commit动作有效
          有效：写入数据
          无效：放弃
      叫做乐观并发控制(OCC)
      

FaRM使用OCC
    原因: OCC使得RaRM使用单向RDMA读取数据时不需要加锁
    如何确定有效性？


每个FaRM服务器运行事务、存储对象
    每个事务都是自己的事务协调器(TC)【？？？？？】


FaRM事物API:
  txCreate()
  o = txRead(oid)   -- RDMA
  o.f += 1
  twWrite(oid, o)   -- 纯本地
  ok = txCommit()   
  
  
什么是oid？
  <区域 #, 地址>
  区域 #是[主 , 从1 , ....]映射的索引
  目标NIC可能使用地址来直接读写RAM，所以目标机器不会使用到CPU


服务器内存布局
    每个区域都是对象的数组
    对象布局
        包含version #的数据头，以及锁
    每个服务器的信息
        （使用RDMA来写，通过轮训来读取）
        到来的日志
        到来的消息队列
    所有的这些都在“非易失的RAM”
    

每个区域在1主f个备份上拷贝 -- f+1份数据
    【几个区域的图表，主/从】
    只能读主服务器；所有的f+1的commit + 写
    复制导致在f个故障内的可用性（只要有一个副本存在就可用）
    
    
txRead
  单向RDMA，从主的内存中获取对象 -- 很快
  同时获取对象的版本号，用于检测并发写


txWrite
   必须在txRead后，只是写本地数据，无远程通信


执行事务 / commit协议w/o失败【图 4】
  暂时只考虑并发控制（无拷贝）

锁（在commit协议中的第一条消息）
    TC将每个更改的对象发送到相应的主节点
    TC使用RDMA将日志追加到每个主节点
    LOCK记录包含oid，version # xaction，新的值
    主节点s/w轮训日志，看到LOCK，校验，返回'yes'/'no'
    LOCK同时被记录在了主的NVRAM和RPC exchange 【？？？】


主在接收到LOCK时的处理动作？
    （对于每个对象）
    如果对象被锁定，或者version != xaction，返回'no'
    否则，设置lock的标记，并且回复'yes'
    注意：已加锁的对象不会再次加锁


TC等到所有的LOCK回复
    如果包含'no‘，停止
      给主节点发送abort，主节点收到后释放锁，在txCommit返回'no'


[暂时忽略VALIDE和COMMIT BACKUP]


TC发送COMMIT-PRIMIARY给每个被写入对象的主节点
  使用RDMA来追加主节点的日志
  TC只等到硬件ACK -- 不等待主节点处理日志
  TC在txCommit返回‘yes'


主在处理COMMIT-PRIMIARY是的操作？
    将对象的新值拷贝到内存，增加对象的版本，清除对象的锁标记


例子:
  T1和T2都希望增加x，同时发送了
    tmp = txRead(x)
    tmp += 1
    txWrite()
    ok = txCommit()
  x应该为0，1或者2，取决于进行了几次commit

如果T1和T2同时进行？
      T1：RX0 LX CX
      T2：RX0 LX CX
  或者
      T1：     RX0 LX CX
      T2： RX0            LX CX
  或者：
      T1：RX0 LX CX
      T2:            RX0 LX CX


为何校验过程需要检测顺序化：
  例如，检测“是否每次执行一个？”
  如果无冲突，版本号不会改变，允许commit
  如果冲突，一个会看到lock或者更改的版本


图4的VALIDATE？
  优化只会被事务读取的对象
  VALIDATE = 单向RDMA读取对象的版本号和锁标记
  如果加锁，或者读取后version改变，TC终止
  不需要加锁，所以比LOCK + COMMIT块【？？？？】


VALIDATE的例子：
x和y的初始值为0
  T1：
    if x == 0: y = 1
  T2:
    if y == 0: x = 1
  （这是一致性的经典测试例子）
  T1，T2 -> y = 1, x = 0
  T2, T2 -> x = 1, y = 0
  abort会导致x = 0, y = 0
  顺序化不会产生x = 1, y = 1的结果
假设同时发生：
  T1: RX LY VX CY
  T2: RY LX VY CX 
  LOCK都会成功
  因为锁标志都被设置了，所以VALIDATES都会失败，所以都会abort
如果：
  T1: RX LY VX     CY
  T2: RY        LX    VY CX
  T1提交，T2的VY会看到T1的锁或则更高的版本，所以T2 abort
但是我们不能再别的L之前同时获取V
所以VALIDATE正确，并且由于无锁，速度更快，不需要commit【？？？】


容错呢？
  防止丢失数据？持久化？可用性？
  在crash时保证正在进行的数据的一致性？分区？


高层次赋值的图表：
  o o region 1
  o o region 2
  o CM
  o o o ZK
  

每个区域的f+1拷贝来容忍每个区域<=f次的失败：
  TC给所有的拷贝发送写（TC的COMMIT-BACKUP）
  如果服务器crash，则并非立刻可用，事物读取、commit会等待
  但是CM会收到通知，生成新的拷贝，恢复事物


重新配置
  一个zookeeper集群
    存储配置，每个配置的机器，CM
    如果多个服务器尝试成为CM的话，断开连接
    如果分区的话，选择活跃的分区
 配置管理器（CM）（未拷贝）
    通过PING来检测所有服务器的活性
    管理重新配置
        检测每个区域至少有一个拷贝存在
        将区域分配给主/备集合
        通知服务器生成新的拷贝
        管理中断事物的完整性
        
        
通过图4的commit协议来看如何实现的【任何可能commit的xaction，，即使服务器失败，也都是可见的】？
  “可能commit“：
    TC或许返回“yes"给客户端
    主或许给连续读显示更新
    
    
在TC从所有的LOCK和VALIDATES看到yes,
  TC给每个备份追加COMMIT-BACKUP
  在所有的ACK后，给每个主的日志中追加COMMIT-PRIMARY
  在每个ACK后，给程序返回commit


注意TC复制到备份；主不会复制
  COMMIT-BACKUP包含写入的数值，足够更新备份的状态


为何TC发送COMMIT PRIMARY必须在所有COMMIT BACKUP后？
  在看到COMMIT-PRIMARY后，主会立刻执行，给其他事务显示更新
  那时，每个对象的新值必须在f+1个日志中（每个区域），能容忍f的失效
  如果有任意一个没有commit-backup的备份，对象只被写入了f个日志，在f个失败是会丢失数据


为什么恢复可行：
  如果TC上报了“commit“，或者主可以暴露值，
  每个区域所有的f+1，包含LOCK和COMMIT-BACKUP在日志中，
  所以f可以在不丢失写，任意区域
  
    
FaRM的缺点：
  1. 由于OCC，会有冲突
  2. 数据必须全部存放在RAM
  3. 数据模型是低等级的，需要SQL的库
  4. 依赖于NIC的特性

